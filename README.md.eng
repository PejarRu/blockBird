# BlockBird Smart Contract Documentation

## Overview
BlockBird is a Solidity smart contract designed for the Ethereum blockchain, enabling users to send and receive messages with pseudonyms. This contract is developed using Solidity version `0.8.9` and is targeted for platforms where anonymous communication with accountability is essential.

## Contract Structure

### Message Structure
- **`Message` Struct**: Represents a message on the platform.
  - `text`: The content of the message.
  - `pseudonym`: The sender's pseudonym.
  - `read`: Boolean indicating if the message has been read.

### State Variables
- **`messages` Array**: Stores all messages in the contract.
- **`pseudonyms` Mapping**: Links Ethereum addresses to user pseudonyms.
- **`pseudonymExists` Mapping**: Tracks which pseudonyms are already in use to ensure uniqueness.

### Events
- **`NewMessage` Event**: Emitted when a new message is created, capturing the pseudonym and the message content.

## Contract Functions

### setPseudonym
- **Purpose**: Allows users to set or change their pseudonym.
- **Logic**: Checks if the pseudonym is already in use. Updates `pseudonyms` and `pseudonymExists` mappings accordingly.

### writeMessage
- **Purpose**: Enables users to write a new message.
- **Logic**: Validates message length and sender's pseudonym existence. Appends the new message to the `messages` array.

### readAllMessages
- **Purpose**: Provides a view function to read all messages.
- **Logic**: Returns the entire array of `messages`.

### readUnreadMessages
- **Purpose**: Retrieves all unread messages and marks them as read.
- **Logic**: Counts unread messages, marks them as read, and returns them in a new array.

### getPseudonymFromMessage
- **Purpose**: Fetches a message by its ID, including the sender's pseudonym.
- **Logic**: Validates the message ID and returns the corresponding message from the `messages` array.

## Design Decisions

### Pseudonym Implementation
- **Why Pseudonyms?**: To maintain user anonymity while allowing communication.
- **Uniqueness**: Ensures each pseudonym is unique, preventing impersonation.

### Message Reading Logic
- **Efficiency**: The `readUnreadMessages` function is designed to minimize gas costs by reducing loop iterations.
- **Mark as Read**: Automatically marks messages as read upon retrieval, aligning with typical message platform behavior.

### Data Storage Considerations
- **Ethereum Storage Costs**: Storing messages and pseudonyms on-chain can incur significant gas costs. This design choice was made considering the importance of decentralization and immutability for this application.

### Security Measures**
- **Reentrancy Guard**: Not necessary as there are no external calls that could lead to reentrancy attacks.
- **Message Length Restriction**: Prevents excessive use of gas and storage space.

## Diagram
```plaintext
User -> setPseudonym -> pseudonyms mapping
      -> writeMessage -> messages array
      -> readAllMessages
      -> readUnreadMessages
      -> getPseudonymFromMessage

Events:
  NewMessage -> Triggered on new message creation
```

## Conclusion
BlockBird smart contract provides a platform for anonymous yet accountable messaging on the Ethereum blockchain. Its design focuses on user anonymity, data integrity, and minimizing gas costs. The contract is suitable for applications where message privacy and user identity protection are paramount.